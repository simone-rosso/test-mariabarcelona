import { FontWeights, concatStyleSets, getFocusStyle, HighContrastSelector, getPlaceholderStyles } from '../../Styling';
import { memoizeFunction } from '../../Utilities';
var ComboBoxHeight = 32;
var ComboBoxLineHeight = 30;
var ComboBoxCaretDownWidth = 32;
var ComboBoxOptionHeight = 36;
var getDisabledStyles = memoizeFunction(function (theme) {
    var _a;
    var semanticColors = theme.semanticColors;
    return {
        backgroundColor: semanticColors.disabledBackground,
        borderColor: semanticColors.disabledBackground,
        color: semanticColors.disabledText,
        cursor: 'default',
        selectors: (_a = {},
            _a[HighContrastSelector] = {
                borderColor: 'GrayText',
                color: 'GrayText'
            },
            _a)
    };
});
var getListOptionHighContrastStyles = memoizeFunction(function (theme) {
    var _a;
    return {
        selectors: (_a = {},
            _a[HighContrastSelector] = {
                backgroundColor: 'Highlight',
                borderColor: 'Highlight',
                color: 'HighlightText',
                MsHighContrastAdjust: 'none'
            },
            _a)
    };
});
export var getOptionStyles = memoizeFunction(function (theme, customStylesForAllOptions, customOptionStylesForCurrentOption, isPending, isHidden) {
    var _a;
    var semanticColors = theme.semanticColors, palette = theme.palette;
    var ComboBoxOptionBackgroundHovered = semanticColors.menuItemBackgroundHovered;
    var ComboBoxOptionTextColorHovered = semanticColors.bodyText;
    var ComboBoxOptionTextColorSelected = palette.black;
    var ComboBoxOptionTextColorDisabled = semanticColors.disabledText;
    var ComboBoxOptionBackgroundDisabled = semanticColors.bodyBackground;
    var optionStyles = {
        root: [
            theme.fonts.medium,
            {
                backgroundColor: isPending ? ComboBoxOptionBackgroundHovered : 'transparent',
                boxSizing: 'border-box',
                cursor: 'pointer',
                display: isHidden ? 'none' : 'block',
                width: '100%',
                height: 'auto',
                minHeight: ComboBoxOptionHeight,
                lineHeight: '20px',
                padding: '0 8px',
                position: 'relative',
                borderWidth: '1px',
                borderStyle: 'solid',
                borderColor: 'transparent',
                borderRadius: 0,
                wordWrap: 'break-word',
                overflowWrap: 'break-word',
                textAlign: 'left',
                selectors: (_a = {},
                    _a[HighContrastSelector] = {
                        borderColor: 'Background'
                    },
                    _a['&.ms-Checkbox'] = {
                        display: 'flex',
                        alignItems: 'center',
                        selectors: {
                            ':hover': {
                                backgroundColor: palette.neutralLighter
                            }
                        }
                    },
                    _a[':hover:active'] = {
                        backgroundColor: palette.neutralLight
                    },
                    _a)
            }
        ],
        rootHovered: {
            backgroundColor: ComboBoxOptionBackgroundHovered,
            color: ComboBoxOptionTextColorHovered
        },
        rootFocused: {
            backgroundColor: ComboBoxOptionBackgroundHovered
        },
        rootChecked: [
            {
                backgroundColor: 'transparent',
                selectors: {
                    ':hover': {
                        backgroundColor: palette.neutralLighter
                    }
                },
                color: ComboBoxOptionTextColorSelected
            },
            getFocusStyle(theme, { inset: -1, isFocusedOnly: false }),
            getListOptionHighContrastStyles(theme)
        ],
        rootDisabled: {
            backgroundColor: ComboBoxOptionBackgroundDisabled,
            color: ComboBoxOptionTextColorDisabled,
            cursor: 'default'
        },
        optionText: {
            overflow: 'hidden',
            whiteSpace: 'nowrap',
            textOverflow: 'ellipsis',
            minWidth: '0px',
            maxWidth: '100%',
            wordWrap: 'break-word',
            overflowWrap: 'break-word',
            display: 'inline-block'
        },
        optionTextWrapper: {
            maxWidth: '100%',
            display: 'flex',
            alignItems: 'center'
        }
    };
    return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);
});
export var getCaretDownButtonStyles = memoizeFunction(function (theme, customStyles) {
    var _a;
    var semanticColors = theme.semanticColors, fonts = theme.fonts;
    var caretButtonTextColor = semanticColors.bodySubtext;
    var caretButtonTextColorHoveredChecked = semanticColors.buttonTextChecked;
    var caretButtonBackgroundHovered = semanticColors.listItemBackgroundHovered;
    var caretButtonBackgroundChecked = semanticColors.listItemBackgroundChecked;
    var caretButtonBackgroundCheckedHovered = semanticColors.listItemBackgroundCheckedHovered;
    var styles = {
        root: {
            color: caretButtonTextColor,
            fontSize: fonts.small.fontSize,
            position: 'absolute',
            // The negative positioning accounts for the 1px root border now that box-sizing is border-box
            top: '-1px',
            right: '-1px',
            height: ComboBoxHeight,
            lineHeight: ComboBoxLineHeight,
            width: ComboBoxCaretDownWidth,
            textAlign: 'center',
            cursor: 'default',
            selectors: (_a = {},
                _a[HighContrastSelector] = {
                    backgroundColor: 'ButtonFace',
                    borderColor: 'ButtonText',
                    color: 'ButtonText',
                    MsHighContrastAdjust: 'none'
                },
                _a)
        },
        icon: {
            fontSize: fonts.small.fontSize
        },
        rootHovered: {
            backgroundColor: caretButtonBackgroundHovered,
            color: caretButtonTextColorHoveredChecked,
            cursor: 'pointer'
        },
        rootPressed: {
            backgroundColor: caretButtonBackgroundChecked,
            color: caretButtonTextColorHoveredChecked
        },
        rootChecked: {
            backgroundColor: caretButtonBackgroundChecked,
            color: caretButtonTextColorHoveredChecked
        },
        rootCheckedHovered: {
            backgroundColor: caretButtonBackgroundCheckedHovered,
            color: caretButtonTextColorHoveredChecked
        },
        rootDisabled: getDisabledStyles(theme)
    };
    return concatStyleSets(styles, customStyles);
});
export var getStyles = memoizeFunction(function (theme, customStyles, comboBoxOptionWidth) {
    var _a, _b, _c, _d;
    var semanticColors = theme.semanticColors, fonts = theme.fonts, palette = theme.palette, effects = theme.effects;
    var ComboBoxRootBackground = semanticColors.bodyBackground;
    var ComboBoxRootTextColor = semanticColors.bodyText;
    var ComboBoxRootBorderColor = semanticColors.inputBorder;
    var ComboBoxRootBorderColorHovered = semanticColors.inputBorderHovered;
    var ComboBoxRootBorderColorFocused = semanticColors.inputFocusBorderAlt;
    var ComboBoxRootColorErrored = semanticColors.errorText;
    var ComboBoxOptionHeaderTextColor = semanticColors.menuHeader;
    var ComboBoxOptionDividerBorderColor = semanticColors.bodyDivider;
    // placeholder style variables
    var placeholderStyles = {
        color: semanticColors.inputPlaceholderText
    };
    var hoverPlaceholderStyles = {
        color: palette.neutralPrimary
    };
    var disabledPlaceholderStyles = {
        color: semanticColors.disabledText
    };
    var ComboBoxRootHighContrastFocused = {
        color: 'HighlightText',
        borderColor: 'Highlight',
        backgroundColor: 'Window',
        borderWidth: '2px',
        MsHighContrastAdjust: 'none',
        paddingLeft: '11px',
        paddingTop: '0',
        paddingBottom: '0',
        selectors: {
            '.ms-ComboBox-CaretDown-button': {
                // Negative positioning to account for the 2px border
                right: '-2px',
                top: '-2px'
            }
        }
    };
    var styles = {
        container: {},
        label: {},
        labelDisabled: {},
        root: [
            theme.fonts.medium,
            {
                boxShadow: 'none',
                marginLeft: '0',
                paddingTop: 1,
                paddingBottom: 1,
                paddingRight: ComboBoxCaretDownWidth,
                paddingLeft: 8,
                color: ComboBoxRootTextColor,
                position: 'relative',
                outline: '0',
                userSelect: 'none',
                backgroundColor: ComboBoxRootBackground,
                borderWidth: '1px',
                borderStyle: 'solid',
                borderColor: ComboBoxRootBorderColor,
                borderRadius: effects.roundedCorner2,
                cursor: 'text',
                display: 'block',
                height: ComboBoxHeight,
                overflow: 'hidden',
                whiteSpace: 'nowrap',
                textOverflow: 'ellipsis',
                boxSizing: 'border-box',
                selectors: {
                    '.ms-Label': {
                        display: 'inline-block',
                        marginBottom: '8px'
                    },
                    '&.is-open': {
                        borderColor: ComboBoxRootBorderColorFocused,
                        selectors: (_a = {},
                            _a[HighContrastSelector] = ComboBoxRootHighContrastFocused,
                            _a)
                    }
                }
            }
        ],
        rootHovered: {
            borderColor: ComboBoxRootBorderColorHovered,
            selectors: (_b = {
                    '.ms-ComboBox-Input': [{ color: palette.neutralDark }, getPlaceholderStyles(hoverPlaceholderStyles)]
                },
                _b[HighContrastSelector] = {
                    color: 'HighlightText',
                    borderColor: 'Highlight',
                    backgroundColor: 'Window',
                    MsHighContrastAdjust: 'none'
                },
                _b)
        },
        rootPressed: {
            borderColor: ComboBoxRootBorderColorFocused,
            selectors: (_c = {},
                _c[HighContrastSelector] = ComboBoxRootHighContrastFocused,
                _c)
        },
        rootFocused: {
            borderColor: ComboBoxRootBorderColorFocused,
            selectors: (_d = {},
                _d[HighContrastSelector] = ComboBoxRootHighContrastFocused,
                _d)
        },
        rootDisabled: getDisabledStyles(theme),
        rootError: {
            borderColor: ComboBoxRootColorErrored,
            marginBottom: '5px'
        },
        rootDisallowFreeForm: {},
        input: [
            getPlaceholderStyles(placeholderStyles),
            {
                backgroundColor: ComboBoxRootBackground,
                color: ComboBoxRootTextColor,
                boxSizing: 'border-box',
                width: '100%',
                height: '28px',
                borderStyle: 'none',
                outline: 'none',
                font: 'inherit',
                textOverflow: 'ellipsis',
                padding: '0',
                selectors: {
                    '::-ms-clear': {
                        display: 'none'
                    }
                }
            }
        ],
        inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],
        errorMessage: {
            color: ComboBoxRootColorErrored
        },
        callout: {
            boxShadow: effects.elevation8
        },
        optionsContainerWrapper: {
            width: comboBoxOptionWidth
        },
        optionsContainer: {
            display: 'block'
        },
        header: [
            fonts.medium,
            {
                fontWeight: FontWeights.semibold,
                color: ComboBoxOptionHeaderTextColor,
                backgroundColor: 'none',
                borderStyle: 'none',
                height: ComboBoxOptionHeight,
                lineHeight: ComboBoxOptionHeight,
                cursor: 'default',
                padding: '0 8px',
                userSelect: 'none',
                textAlign: 'left'
            }
        ],
        divider: {
            height: 1,
            backgroundColor: ComboBoxOptionDividerBorderColor
        }
    };
    return concatStyleSets(styles, customStyles);
});
//# sourceMappingURL=ComboBox.styles.js.map