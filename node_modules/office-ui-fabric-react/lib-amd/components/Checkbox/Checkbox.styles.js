define(["require", "exports", "../../Styling", "../../Utilities"], function (require, exports, Styling_1, Utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GlobalClassNames = {
        root: 'ms-Checkbox',
        label: 'ms-Checkbox-label',
        checkbox: 'ms-Checkbox-checkbox',
        checkmark: 'ms-Checkbox-checkmark',
        text: 'ms-Checkbox-text'
    };
    var MS_CHECKBOX_LABEL_SIZE = '20px';
    var MS_CHECKBOX_TRANSITION_DURATION = '200ms';
    var MS_CHECKBOX_TRANSITION_TIMING = 'cubic-bezier(.4, 0, .23, 1)';
    exports.getStyles = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var className = props.className, theme = props.theme, reversed = props.reversed, checked = props.checked, disabled = props.disabled, isUsingCustomLabelRender = props.isUsingCustomLabelRender;
        var semanticColors = theme.semanticColors, effects = theme.effects, palette = theme.palette, fonts = theme.fonts;
        var classNames = Styling_1.getGlobalClassNames(GlobalClassNames, theme);
        var checkmarkFontColor = semanticColors.inputForegroundChecked;
        // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.inputBorder
        var checkmarkFontColorHovered = palette.neutralSecondary;
        // TODO: after updating the semanticColors slots mapping this needs to be semanticColors.smallInputBorder
        var checkboxBorderColor = palette.neutralPrimary;
        var checkboxBorderColorChecked = semanticColors.inputBackgroundChecked;
        var checkboxBorderColorDisabled = semanticColors.disabledBodySubtext;
        var checkboxBorderHoveredColor = semanticColors.inputBorderHovered;
        var checkboxBackgroundChecked = semanticColors.inputBackgroundChecked;
        // TODO: after updating the semanticColors slots mapping following 2 tokens need to be semanticColors.inputBackgroundCheckedHovered
        var checkboxBackgroundCheckedHovered = palette.themeDark;
        var checkboxBorderColorCheckedHovered = palette.themeDark;
        var checkboxHoveredTextColor = semanticColors.inputTextHovered;
        var checkboxBackgroundDisabledChecked = semanticColors.disabledBodySubtext;
        var checkboxTextColor = semanticColors.bodyText;
        var checkboxTextColorDisabled = semanticColors.disabledText;
        return {
            root: [
                classNames.root,
                {
                    position: 'relative',
                    display: 'flex'
                },
                reversed && 'reversed',
                checked && 'is-checked',
                !disabled && 'is-enabled',
                disabled && 'is-disabled',
                !disabled && [
                    !checked && {
                        selectors: {
                            ':hover .ms-Checkbox-checkbox': {
                                borderColor: checkboxBorderHoveredColor,
                                selectors: (_a = {},
                                    _a[Styling_1.HighContrastSelector] = {
                                        borderColor: 'Highlight'
                                    },
                                    _a)
                            },
                            ':focus .ms-Checkbox-checkbox': { borderColor: checkboxBorderHoveredColor },
                            ':hover .ms-Checkbox-checkmark': {
                                color: checkmarkFontColorHovered,
                                opacity: '1',
                                selectors: (_b = {},
                                    _b[Styling_1.HighContrastSelector] = {
                                        color: 'Highlight'
                                    },
                                    _b)
                            }
                        }
                    },
                    checked && {
                        selectors: (_c = {
                                ':hover .ms-Checkbox-checkbox': {
                                    background: checkboxBackgroundCheckedHovered,
                                    borderColor: checkboxBorderColorCheckedHovered
                                },
                                ':focus .ms-Checkbox-checkbox': {
                                    background: checkboxBackgroundCheckedHovered,
                                    borderColor: checkboxBorderColorCheckedHovered
                                }
                            },
                            _c[Styling_1.HighContrastSelector] = {
                                selectors: {
                                    ':hover .ms-Checkbox-checkbox': {
                                        background: 'Window',
                                        borderColor: 'Highlight'
                                    },
                                    ':focus .ms-Checkbox-checkbox': {
                                        background: 'Highlight'
                                    },
                                    ':focus:hover .ms-Checkbox-checkbox': {
                                        background: 'Highlight'
                                    },
                                    ':focus:hover .ms-Checkbox-checkmark': {
                                        color: 'Window'
                                    },
                                    ':hover .ms-Checkbox-checkmark': {
                                        color: 'Highlight'
                                    }
                                }
                            },
                            _c)
                    },
                    {
                        selectors: {
                            ':hover .ms-Checkbox-text': { color: checkboxHoveredTextColor },
                            ':focus .ms-Checkbox-text': { color: checkboxHoveredTextColor }
                        }
                    }
                ],
                className
            ],
            input: {
                position: 'absolute',
                background: 'none',
                opacity: 0,
                selectors: (_d = {},
                    _d["." + Utilities_1.IsFocusVisibleClassName + " &:focus + label::before"] = {
                        outline: '1px solid ' + theme.palette.neutralSecondary,
                        outlineOffset: '2px',
                        selectors: (_e = {},
                            _e[Styling_1.HighContrastSelector] = {
                                outline: '1px solid ActiveBorder'
                            },
                            _e)
                    },
                    _d)
            },
            label: [
                classNames.label,
                theme.fonts.medium,
                {
                    display: 'flex',
                    alignItems: isUsingCustomLabelRender ? 'center' : 'flex-start',
                    cursor: disabled ? 'default' : 'pointer',
                    position: 'relative',
                    userSelect: 'none',
                    textAlign: 'left'
                },
                reversed && {
                    flexDirection: 'row-reverse',
                    justifyContent: 'flex-end'
                },
                {
                    selectors: {
                        '&::before': {
                            position: 'absolute',
                            left: 0,
                            right: 0,
                            top: 0,
                            bottom: 0,
                            content: '""',
                            pointerEvents: 'none'
                        }
                    }
                }
            ],
            checkbox: [
                classNames.checkbox,
                {
                    display: 'flex',
                    flexShrink: 0,
                    alignItems: 'center',
                    justifyContent: 'center',
                    height: MS_CHECKBOX_LABEL_SIZE,
                    width: MS_CHECKBOX_LABEL_SIZE,
                    border: "1px solid " + checkboxBorderColor,
                    borderRadius: effects.roundedCorner2,
                    boxSizing: 'border-box',
                    transitionProperty: 'background, border, border-color',
                    transitionDuration: MS_CHECKBOX_TRANSITION_DURATION,
                    transitionTimingFunction: MS_CHECKBOX_TRANSITION_TIMING,
                    /* in case the icon is bigger than the box */
                    overflow: 'hidden'
                },
                !reversed
                    ? // this margin on the checkbox is for backwards compat.
                        // notably it has the effect where a customRender is used, there will be only a 4px margin from checkbox to label.
                        // the label by default would have another 4px margin for a total of 8px margin between checkbox and label.
                        // we don't combine the two (and move it into the text) to not incur a breaking change for everyone using custom render atm.
                        {
                            marginRight: 4
                        }
                    : {
                        marginLeft: 4
                    },
                !disabled &&
                    checked && {
                    background: checkboxBackgroundChecked,
                    borderColor: checkboxBorderColorChecked,
                    selectors: (_f = {},
                        _f[Styling_1.HighContrastSelector] = {
                            background: 'Highlight',
                            borderColor: 'Highlight'
                        },
                        _f)
                },
                disabled && {
                    borderColor: checkboxBorderColorDisabled,
                    selectors: (_g = {},
                        _g[Styling_1.HighContrastSelector] = {
                            borderColor: 'InactiveBorder'
                        },
                        _g)
                },
                checked &&
                    disabled && {
                    background: checkboxBackgroundDisabledChecked,
                    borderColor: checkboxBorderColorDisabled
                }
            ],
            checkmark: [
                classNames.checkmark,
                {
                    opacity: checked ? '1' : '0',
                    color: checkmarkFontColor,
                    selectors: (_h = {},
                        _h[Styling_1.HighContrastSelector] = {
                            color: disabled ? 'InactiveBorder' : 'Window',
                            MsHighContrastAdjust: 'none'
                        },
                        _h)
                }
            ],
            text: [
                classNames.text,
                {
                    color: disabled ? checkboxTextColorDisabled : checkboxTextColor,
                    fontSize: fonts.medium.fontSize,
                    lineHeight: '20px'
                },
                !reversed
                    ? {
                        marginLeft: 4
                    }
                    : {
                        marginRight: 4
                    },
                disabled && {
                    selectors: (_j = {},
                        _j[Styling_1.HighContrastSelector] = {
                            // backwards compat for the color of the text when the checkbox was rendered
                            // using a Button.
                            color: 'InactiveBorder'
                        },
                        _j)
                }
            ]
        };
    };
});
//# sourceMappingURL=Checkbox.styles.js.map