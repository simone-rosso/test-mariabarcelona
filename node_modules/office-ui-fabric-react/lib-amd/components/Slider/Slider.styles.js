define(["require", "exports", "../../Styling", "@uifabric/utilities"], function (require, exports, Styling_1, utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GlobalClassNames = {
        root: 'ms-Slider',
        enabled: 'ms-Slider-enabled',
        disabled: 'ms-Slider-disabled',
        row: 'ms-Slider-row',
        column: 'ms-Slider-column',
        container: 'ms-Slider-container',
        slideBox: 'ms-Slider-slideBox',
        line: 'ms-Slider-line',
        thumb: 'ms-Slider-thumb',
        activeSection: 'ms-Slider-active',
        inactiveSection: 'ms-Slider-inactive',
        valueLabel: 'ms-Slider-value',
        showValue: 'ms-Slider-showValue',
        showTransitions: 'ms-Slider-showTransitions',
        zeroTick: 'ms-Slider-zeroTick'
    };
    exports.getStyles = function (props) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        var className = props.className, titleLabelClassName = props.titleLabelClassName, theme = props.theme, vertical = props.vertical, disabled = props.disabled, showTransitions = props.showTransitions, showValue = props.showValue;
        var palette = theme.palette;
        var classNames = Styling_1.getGlobalClassNames(GlobalClassNames, theme);
        // Tokens
        var sliderInteractedActiveSectionColor = palette.themePrimary;
        var sliderInteractedInactiveSectionColor = palette.themeLight;
        var sliderRestActiveSectionColor = palette.neutralSecondary;
        var sliderRestInactiveSectionColor = palette.neutralTertiaryAlt;
        var sliderDisabledActiveSectionColor = palette.neutralTertiary;
        var sliderDisabledInactiveSectionColor = palette.neutralLight;
        var sliderThumbBackgroundColor = palette.white;
        var sliderThumbBorderColor = palette.neutralSecondary;
        var sliderThumbDisabledBorderColor = palette.neutralTertiaryAlt;
        var slideBoxActiveSectionStyles = !disabled && {
            backgroundColor: sliderInteractedActiveSectionColor,
            selectors: (_a = {},
                _a[Styling_1.HighContrastSelector] = {
                    backgroundColor: 'Highlight'
                },
                _a)
        };
        var slideBoxInactiveSectionStyles = !disabled && {
            backgroundColor: sliderInteractedInactiveSectionColor,
            selectors: (_b = {},
                _b[Styling_1.HighContrastSelector] = {
                    borderColor: 'Highlight'
                },
                _b)
        };
        var slideBoxActiveThumbStyles = !disabled && {
            border: "2px solid " + sliderInteractedActiveSectionColor,
            selectors: (_c = {},
                _c[Styling_1.HighContrastSelector] = {
                    borderColor: 'Highlight'
                },
                _c)
        };
        var slideBoxActiveZeroTickStyles = !props.disabled && {
            backgroundColor: theme.palette.themeLight,
            selectors: (_d = {},
                _d[Styling_1.HighContrastSelector] = {
                    backgroundColor: 'Highlight'
                },
                _d)
        };
        return {
            root: [
                classNames.root,
                theme.fonts.medium,
                {
                    userSelect: 'none'
                },
                vertical && {
                    marginRight: 8
                }
            ].concat([!disabled ? classNames.enabled : undefined], [disabled ? classNames.disabled : undefined], [!vertical ? classNames.row : undefined], [vertical ? classNames.column : undefined], [
                className
            ]),
            titleLabel: [
                {
                    padding: 0
                },
                titleLabelClassName
            ],
            container: [
                classNames.container,
                {
                    display: 'flex',
                    flexWrap: 'nowrap',
                    alignItems: 'center'
                },
                vertical && {
                    flexDirection: 'column',
                    height: '100%',
                    textAlign: 'center',
                    margin: '8px 0'
                }
            ],
            slideBox: [
                classNames.slideBox,
                Styling_1.getFocusStyle(theme),
                {
                    background: 'transparent',
                    border: 'none',
                    flexGrow: 1,
                    lineHeight: 28,
                    display: 'flex',
                    alignItems: 'center',
                    selectors: (_e = {},
                        _e[":active ." + classNames.activeSection] = slideBoxActiveSectionStyles,
                        _e[":hover ." + classNames.activeSection] = slideBoxActiveSectionStyles,
                        _e[":active ." + classNames.inactiveSection] = slideBoxInactiveSectionStyles,
                        _e[":hover ." + classNames.inactiveSection] = slideBoxInactiveSectionStyles,
                        _e[":active ." + classNames.thumb] = slideBoxActiveThumbStyles,
                        _e[":hover ." + classNames.thumb] = slideBoxActiveThumbStyles,
                        _e[":active ." + classNames.zeroTick] = slideBoxActiveZeroTickStyles,
                        _e[":hover ." + classNames.zeroTick] = slideBoxActiveZeroTickStyles,
                        _e)
                },
                vertical
                    ? {
                        height: '100%',
                        width: 28,
                        padding: '8px 0' // Make room for thumb at bottom of line
                    }
                    : {
                        height: 28,
                        width: 'auto',
                        padding: '0 8px' // Make room for thumb at ends of line
                    }
            ].concat([showValue ? classNames.showValue : undefined], [showTransitions ? classNames.showTransitions : undefined]),
            thumb: [
                classNames.thumb,
                {
                    borderWidth: 2,
                    borderStyle: 'solid',
                    borderColor: sliderThumbBorderColor,
                    borderRadius: 10,
                    boxSizing: 'border-box',
                    background: sliderThumbBackgroundColor,
                    display: 'block',
                    width: 16,
                    height: 16,
                    position: 'absolute'
                },
                vertical
                    ? {
                        left: -6,
                        margin: '0 auto',
                        transform: 'translateY(8px)'
                    }
                    : {
                        top: -6,
                        transform: utilities_1.getRTL() ? 'translateX(50%)' : 'translateX(-50%)'
                    },
                showTransitions && {
                    transition: "left " + Styling_1.AnimationVariables.durationValue3 + " " + Styling_1.AnimationVariables.easeFunction1
                },
                disabled && {
                    borderColor: sliderThumbDisabledBorderColor,
                    selectors: (_f = {},
                        _f[Styling_1.HighContrastSelector] = {
                            borderColor: 'GrayText'
                        },
                        _f)
                }
            ],
            line: [
                classNames.line,
                {
                    display: 'flex',
                    position: 'relative'
                },
                vertical
                    ? {
                        height: '100%',
                        width: 4,
                        margin: '0 auto',
                        flexDirection: 'column-reverse'
                    }
                    : {
                        width: '100%'
                    }
            ],
            lineContainer: [
                {
                    borderRadius: 4,
                    boxSizing: 'border-box'
                },
                vertical
                    ? {
                        width: 4,
                        height: '100%'
                    }
                    : {
                        height: 4,
                        width: '100%'
                    }
            ],
            activeSection: [
                classNames.activeSection,
                {
                    background: sliderRestActiveSectionColor,
                    selectors: (_g = {},
                        _g[Styling_1.HighContrastSelector] = {
                            backgroundColor: 'WindowText'
                        },
                        _g)
                },
                showTransitions && {
                    transition: "width " + Styling_1.AnimationVariables.durationValue3 + " " + Styling_1.AnimationVariables.easeFunction1
                },
                disabled && {
                    background: sliderDisabledActiveSectionColor,
                    selectors: (_h = {},
                        _h[Styling_1.HighContrastSelector] = {
                            backgroundColor: 'GrayText',
                            borderColor: 'GrayText'
                        },
                        _h)
                }
            ],
            inactiveSection: [
                classNames.inactiveSection,
                {
                    background: sliderRestInactiveSectionColor,
                    selectors: (_j = {},
                        _j[Styling_1.HighContrastSelector] = {
                            border: '1px solid WindowText'
                        },
                        _j)
                },
                showTransitions && {
                    transition: "width " + Styling_1.AnimationVariables.durationValue3 + " " + Styling_1.AnimationVariables.easeFunction1
                },
                disabled && {
                    background: sliderDisabledInactiveSectionColor,
                    selectors: (_k = {},
                        _k[Styling_1.HighContrastSelector] = {
                            borderColor: 'GrayText'
                        },
                        _k)
                }
            ],
            zeroTick: [
                classNames.zeroTick,
                {
                    position: 'absolute',
                    background: theme.palette.neutralTertiaryAlt,
                    selectors: (_l = {},
                        _l[Styling_1.HighContrastSelector] = {
                            backgroundColor: 'WindowText'
                        },
                        _l)
                },
                props.disabled && {
                    background: theme.palette.neutralLight,
                    selectors: (_m = {},
                        _m[Styling_1.HighContrastSelector] = {
                            backgroundColor: 'GrayText'
                        },
                        _m)
                },
                props.vertical
                    ? {
                        width: '16px',
                        height: '1px',
                        transform: utilities_1.getRTL() ? 'translateX(6px)' : 'translateX(-6px)'
                    }
                    : {
                        width: '1px',
                        height: '16px',
                        transform: 'translateY(-6px)'
                    }
            ],
            valueLabel: [
                classNames.valueLabel,
                {
                    flexShrink: 1,
                    width: 30,
                    lineHeight: '1' // using a string here meaning it's relative to the size of the font
                },
                vertical
                    ? {
                        margin: '0 auto',
                        whiteSpace: 'nowrap',
                        width: 40
                    }
                    : {
                        margin: '0 8px',
                        whiteSpace: 'nowrap',
                        width: 40
                    }
            ]
        };
    };
});
//# sourceMappingURL=Slider.styles.js.map